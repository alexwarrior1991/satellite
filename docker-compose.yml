version: '3.8'

services:
  # Application service
#  app:
#    build: .
#    container_name: satellite-app
#    depends_on:
#      - postgres
#      - redis
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_PROFILES_ACTIVE=prod
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/satellite_db
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=postgres
#      - SPRING_DATA_REDIS_HOST=redis
#      - SPRING_DATA_REDIS_PORT=6379
#    networks:
#      - satellite-network
#    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: satellite-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=satellite_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - satellite-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for cache and message queue
  redis:
    image: redis:7-alpine
    container_name: satellite-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - satellite-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simulator service (optional, can be enabled by uncommenting)
  # simulator:
  #   build: .
  #   container_name: satellite-simulator
  #   depends_on:
  #     - app
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=simulator
  #     - APP_SIMULATOR_API_URL=http://app:8080/api/telemetry
  #   networks:
  #     - satellite-network
  #   restart: on-failure

networks:
  satellite-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
